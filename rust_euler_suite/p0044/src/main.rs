
use lib_number_sequences::pentagonal::Pentagonal;
use lib_number_sequences::pentagonal::is_pentagonal_with_hint;

//    `P0044`: https://projecteuler.net/problem=44
//
//    Pentagonal numbers are generated by the formula, P_n=n(3n-1)/2. The first ten pentagonal numbers are:
//          1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//     idx  1, 2,  3,  4,  5,  6,  7,  8,   9,  10
//    It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 70 - 22 = 48, is not pentagonal.
//
//    Find the pair of pentagonal numbers, P_j and P_k,
//    for which their sum and difference are pentagonal and D = |P_k - P_j| is minimised; what is the value of D?

// P_n - P_(n-1)
//   = n(3n-1)/2 - (n-1)(3(n-1)-1)/2
//   = ( 3n^2-n - (n-1)(3n-4) )/2
//   = ( 3n^2-n - (3n^2-4n-3n+4) )/2
//   = ( 6n - 4 )/2
//   = 3n - 2

// P_n - P_(n-x)
//   = n(3n-1)/2 - (n-x)(3(n-x)-1)/2
//   = ( 3n^2-n - (n-x)(3n-3x-1) )/2
//   = ( 3n^2-n - (3n^2-3nx-n-3nx+3x^2+x) )/2
//   = ( 3n^2 - n - 3n^2 + 3nx + n + 3nx - 3x^2 - x )/2
//   = ( 6nx - 3x^2 - x )/2

const MAX_CHECK: u32 = 10000;

fn main() {
    // idea:
    // - iterate over pentagonal numbers in increasing order with index n
    // - for k = n+1, ...
    //   - break k for k > n if P_k-P_k-1 > P_n
    //   - if P_k-P_n is pentagonal then
    //     - check if P_k + (P_k-P_n) is pentagonal
    //     - if true then print found P_n, P_k-P_n, P_k
    
    'outer: for n in 1..MAX_CHECK {
        let pn = Pentagonal::new(n);

        'inner: for k in (n+1)..MAX_CHECK {
            let pk = Pentagonal::new(k);

            if pk.value - pk.prev().value > pn.value {
                println!("Break search with Pn {} at Pk {}", pn, pk);
                break 'inner;
            }

            let pk_minus_pn = is_pentagonal_with_hint(pk.value - pn.value, &pk);

            if pk_minus_pn.is_some() {
                println!("Pk {} - Pn {} = {} is pentagonal", pk, pn, pk_minus_pn.unwrap());

                let pk_plus_pk_minus_pn = is_pentagonal_with_hint(2*pk.value - pn.value, &pk);

                if pk_plus_pk_minus_pn.is_some() {
                    println!("Found Pn {} as diff, for Pk-Pn {} and Pk {} the sum and diff are pentagonal", pn, pk_minus_pn.unwrap(), pk);
                    break 'outer;
                }

            }
        }

    }
}


// Found Pn (1912, 5482660) as diff, for Pk-Pn (1020, 1560090) and Pk (2167, 7042750) the sum and diff are pentagonal